"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""


from io import BytesIO
import struct

class gamepad_lcmt(object):

    __slots__ = ["leftBumper", "rightBumper", "leftTriggerButton", "rightTriggerButton", "back", "start", "a", "b", "x", "y", "leftStickButton", "rightStickButton", "leftTriggerAnalog", "rightTriggerAnalog", "leftStickAnalog", "rightStickAnalog"]

    __typenames__ = ["int32_t", "int32_t", "int32_t", "int32_t", "int32_t", "int32_t", "int32_t", "int32_t", "int32_t", "int32_t", "int32_t", "int32_t", "float", "float", "float", "float"]

    __dimensions__ = [None, None, None, None, None, None, None, None, None, None, None, None, None, None, [2], [2]]

    def __init__(self):
        self.leftBumper = 0
        """ LCM Type: int32_t """
        self.rightBumper = 0
        """ LCM Type: int32_t """
        self.leftTriggerButton = 0
        """ LCM Type: int32_t """
        self.rightTriggerButton = 0
        """ LCM Type: int32_t """
        self.back = 0
        """ LCM Type: int32_t """
        self.start = 0
        """ LCM Type: int32_t """
        self.a = 0
        """ LCM Type: int32_t """
        self.b = 0
        """ LCM Type: int32_t """
        self.x = 0
        """ LCM Type: int32_t """
        self.y = 0
        """ LCM Type: int32_t """
        self.leftStickButton = 0
        """ LCM Type: int32_t """
        self.rightStickButton = 0
        """ LCM Type: int32_t """
        self.leftTriggerAnalog = 0.0
        """ LCM Type: float """
        self.rightTriggerAnalog = 0.0
        """ LCM Type: float """
        self.leftStickAnalog = [ 0.0 for dim0 in range(2) ]
        """ LCM Type: float[2] """
        self.rightStickAnalog = [ 0.0 for dim0 in range(2) ]
        """ LCM Type: float[2] """

    def encode(self):
        buf = BytesIO()
        buf.write(gamepad_lcmt._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">iiiiiiiiiiiiff", self.leftBumper, self.rightBumper, self.leftTriggerButton, self.rightTriggerButton, self.back, self.start, self.a, self.b, self.x, self.y, self.leftStickButton, self.rightStickButton, self.leftTriggerAnalog, self.rightTriggerAnalog))
        buf.write(struct.pack('>2f', *self.leftStickAnalog[:2]))
        buf.write(struct.pack('>2f', *self.rightStickAnalog[:2]))

    @staticmethod
    def decode(data: bytes):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != gamepad_lcmt._get_packed_fingerprint():
            raise ValueError("Decode error")
        return gamepad_lcmt._decode_one(buf)

    @staticmethod
    def _decode_one(buf):
        self = gamepad_lcmt()
        self.leftBumper, self.rightBumper, self.leftTriggerButton, self.rightTriggerButton, self.back, self.start, self.a, self.b, self.x, self.y, self.leftStickButton, self.rightStickButton, self.leftTriggerAnalog, self.rightTriggerAnalog = struct.unpack(">iiiiiiiiiiiiff", buf.read(56))
        self.leftStickAnalog = struct.unpack('>2f', buf.read(8))
        self.rightStickAnalog = struct.unpack('>2f', buf.read(8))
        return self

    @staticmethod
    def _get_hash_recursive(parents):
        if gamepad_lcmt in parents: return 0
        tmphash = (0x37c71cc8957b05cf) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _packed_fingerprint = None

    @staticmethod
    def _get_packed_fingerprint():
        if gamepad_lcmt._packed_fingerprint is None:
            gamepad_lcmt._packed_fingerprint = struct.pack(">Q", gamepad_lcmt._get_hash_recursive([]))
        return gamepad_lcmt._packed_fingerprint

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", gamepad_lcmt._get_packed_fingerprint())[0]

