"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""


from io import BytesIO
import struct

class leg_control_command_lcmt(object):

    __slots__ = ["tau_ff", "q_des", "qd_des", "kp_joint", "kd_joint", "torque_desired"]

    __typenames__ = ["float", "float", "float", "float", "float", "float"]

    __dimensions__ = [[16], [16], [16], [16], [16], [16]]

    def __init__(self):
        self.tau_ff = [ 0.0 for dim0 in range(16) ]
        """ LCM Type: float[16] """
        self.q_des = [ 0.0 for dim0 in range(16) ]
        """ LCM Type: float[16] """
        self.qd_des = [ 0.0 for dim0 in range(16) ]
        """ LCM Type: float[16] """
        self.kp_joint = [ 0.0 for dim0 in range(16) ]
        """ LCM Type: float[16] """
        self.kd_joint = [ 0.0 for dim0 in range(16) ]
        """ LCM Type: float[16] """
        self.torque_desired = [ 0.0 for dim0 in range(16) ]
        """ LCM Type: float[16] """

    def encode(self):
        buf = BytesIO()
        buf.write(leg_control_command_lcmt._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack('>16f', *self.tau_ff[:16]))
        buf.write(struct.pack('>16f', *self.q_des[:16]))
        buf.write(struct.pack('>16f', *self.qd_des[:16]))
        buf.write(struct.pack('>16f', *self.kp_joint[:16]))
        buf.write(struct.pack('>16f', *self.kd_joint[:16]))
        buf.write(struct.pack('>16f', *self.torque_desired[:16]))

    @staticmethod
    def decode(data: bytes):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != leg_control_command_lcmt._get_packed_fingerprint():
            raise ValueError("Decode error")
        return leg_control_command_lcmt._decode_one(buf)

    @staticmethod
    def _decode_one(buf):
        self = leg_control_command_lcmt()
        self.tau_ff = struct.unpack('>16f', buf.read(64))
        self.q_des = struct.unpack('>16f', buf.read(64))
        self.qd_des = struct.unpack('>16f', buf.read(64))
        self.kp_joint = struct.unpack('>16f', buf.read(64))
        self.kd_joint = struct.unpack('>16f', buf.read(64))
        self.torque_desired = struct.unpack('>16f', buf.read(64))
        return self

    @staticmethod
    def _get_hash_recursive(parents):
        if leg_control_command_lcmt in parents: return 0
        tmphash = (0xc0324dbb40dc5343) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _packed_fingerprint = None

    @staticmethod
    def _get_packed_fingerprint():
        if leg_control_command_lcmt._packed_fingerprint is None:
            leg_control_command_lcmt._packed_fingerprint = struct.pack(">Q", leg_control_command_lcmt._get_hash_recursive([]))
        return leg_control_command_lcmt._packed_fingerprint

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", leg_control_command_lcmt._get_packed_fingerprint())[0]

