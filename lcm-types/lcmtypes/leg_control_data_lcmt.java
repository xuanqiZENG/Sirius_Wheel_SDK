/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 * lcm-gen 1.5.1
 */

package lcmtypes;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class leg_control_data_lcmt implements lcm.lcm.LCMEncodable
{
    /**
     * LCM Type: float[16]
     */
    public float q[];

    /**
     * LCM Type: float[16]
     */
    public float qd[];

    /**
     * LCM Type: float[16]
     */
    public float tauIq[];

    /**
     * LCM Type: float[16]
     */
    public float tauEst[];

    /**
     * LCM Type: float[16]
     */
    public float uq[];

    /**
     * LCM Type: float[16]
     */
    public float ud[];

    /**
     * LCM Type: float[4]
     */
    public float quat[];

    /**
     * LCM Type: float[3]
     */
    public float gyro[];

    /**
     * LCM Type: float[3]
     */
    public float accelerometer[];

 
    public leg_control_data_lcmt()
    {
        q = new float[16];
        qd = new float[16];
        tauIq = new float[16];
        tauEst = new float[16];
        uq = new float[16];
        ud = new float[16];
        quat = new float[4];
        gyro = new float[3];
        accelerometer = new float[3];
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0x10b0e97b5e31a98aL;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(lcmtypes.leg_control_data_lcmt.class))
            return 0L;
 
        classes.add(lcmtypes.leg_control_data_lcmt.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        for (int a = 0; a < 16; a++) {
            outs.writeFloat(this.q[a]); 
        }
 
        for (int a = 0; a < 16; a++) {
            outs.writeFloat(this.qd[a]); 
        }
 
        for (int a = 0; a < 16; a++) {
            outs.writeFloat(this.tauIq[a]); 
        }
 
        for (int a = 0; a < 16; a++) {
            outs.writeFloat(this.tauEst[a]); 
        }
 
        for (int a = 0; a < 16; a++) {
            outs.writeFloat(this.uq[a]); 
        }
 
        for (int a = 0; a < 16; a++) {
            outs.writeFloat(this.ud[a]); 
        }
 
        for (int a = 0; a < 4; a++) {
            outs.writeFloat(this.quat[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeFloat(this.gyro[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeFloat(this.accelerometer[a]); 
        }
 
    }
 
    public leg_control_data_lcmt(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public leg_control_data_lcmt(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static lcmtypes.leg_control_data_lcmt _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        lcmtypes.leg_control_data_lcmt o = new lcmtypes.leg_control_data_lcmt();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.q = new float[(int) 16];
        for (int a = 0; a < 16; a++) {
            this.q[a] = ins.readFloat();
        }
 
        this.qd = new float[(int) 16];
        for (int a = 0; a < 16; a++) {
            this.qd[a] = ins.readFloat();
        }
 
        this.tauIq = new float[(int) 16];
        for (int a = 0; a < 16; a++) {
            this.tauIq[a] = ins.readFloat();
        }
 
        this.tauEst = new float[(int) 16];
        for (int a = 0; a < 16; a++) {
            this.tauEst[a] = ins.readFloat();
        }
 
        this.uq = new float[(int) 16];
        for (int a = 0; a < 16; a++) {
            this.uq[a] = ins.readFloat();
        }
 
        this.ud = new float[(int) 16];
        for (int a = 0; a < 16; a++) {
            this.ud[a] = ins.readFloat();
        }
 
        this.quat = new float[(int) 4];
        for (int a = 0; a < 4; a++) {
            this.quat[a] = ins.readFloat();
        }
 
        this.gyro = new float[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.gyro[a] = ins.readFloat();
        }
 
        this.accelerometer = new float[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.accelerometer[a] = ins.readFloat();
        }
 
    }
 
    public lcmtypes.leg_control_data_lcmt copy()
    {
        lcmtypes.leg_control_data_lcmt outobj = new lcmtypes.leg_control_data_lcmt();
        outobj.q = new float[(int) 16];
        System.arraycopy(this.q, 0, outobj.q, 0, 16); 
        outobj.qd = new float[(int) 16];
        System.arraycopy(this.qd, 0, outobj.qd, 0, 16); 
        outobj.tauIq = new float[(int) 16];
        System.arraycopy(this.tauIq, 0, outobj.tauIq, 0, 16); 
        outobj.tauEst = new float[(int) 16];
        System.arraycopy(this.tauEst, 0, outobj.tauEst, 0, 16); 
        outobj.uq = new float[(int) 16];
        System.arraycopy(this.uq, 0, outobj.uq, 0, 16); 
        outobj.ud = new float[(int) 16];
        System.arraycopy(this.ud, 0, outobj.ud, 0, 16); 
        outobj.quat = new float[(int) 4];
        System.arraycopy(this.quat, 0, outobj.quat, 0, 4); 
        outobj.gyro = new float[(int) 3];
        System.arraycopy(this.gyro, 0, outobj.gyro, 0, 3); 
        outobj.accelerometer = new float[(int) 3];
        System.arraycopy(this.accelerometer, 0, outobj.accelerometer, 0, 3); 
        return outobj;
    }
 
}

